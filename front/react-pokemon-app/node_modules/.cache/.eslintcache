[{"C:\\Users\\basde\\Documents\\Projet\\react-training\\front\\react-pokemon-app\\src\\index.tsx":"1","C:\\Users\\basde\\Documents\\Projet\\react-training\\front\\react-pokemon-app\\src\\App.tsx":"2","C:\\Users\\basde\\Documents\\Projet\\react-training\\front\\react-pokemon-app\\src\\models\\mock-pokemon.ts":"3","C:\\Users\\basde\\Documents\\Projet\\react-training\\front\\react-pokemon-app\\src\\pages\\pokemon-list.tsx":"4","C:\\Users\\basde\\Documents\\Projet\\react-training\\front\\react-pokemon-app\\src\\components\\pokemon-card.tsx":"5","C:\\Users\\basde\\Documents\\Projet\\react-training\\front\\react-pokemon-app\\src\\models\\pokemon.ts":"6","C:\\Users\\basde\\Documents\\Projet\\react-training\\front\\react-pokemon-app\\src\\helpers\\format-date.ts":"7","C:\\Users\\basde\\Documents\\Projet\\react-training\\front\\react-pokemon-app\\src\\helpers\\format-type.ts":"8","C:\\Users\\basde\\Documents\\Projet\\react-training\\front\\react-pokemon-app\\src\\pages\\pokemon-detail.tsx":"9","C:\\Users\\basde\\Documents\\Projet\\react-training\\front\\react-pokemon-app\\src\\pages\\page-not-found.tsx":"10","C:\\Users\\basde\\Documents\\Projet\\react-training\\front\\react-pokemon-app\\src\\pages\\pokemon-edit.tsx":"11","C:\\Users\\basde\\Documents\\Projet\\react-training\\front\\react-pokemon-app\\src\\components\\pokemon-form.tsx":"12","C:\\Users\\basde\\Documents\\Projet\\react-training\\front\\react-pokemon-app\\src\\services\\pokemon-services.ts":"13"},{"size":161,"mtime":1657089310184,"results":"14","hashOfConfig":"15"},{"size":1226,"mtime":1657108333113,"results":"16","hashOfConfig":"15"},{"size":2948,"mtime":1657089310185,"results":"17","hashOfConfig":"15"},{"size":869,"mtime":1657288704951,"results":"18","hashOfConfig":"15"},{"size":1694,"mtime":1657099018578,"results":"19","hashOfConfig":"15"},{"size":816,"mtime":1657089310185,"results":"20","hashOfConfig":"15"},{"size":163,"mtime":1657287430973,"results":"21","hashOfConfig":"15"},{"size":1140,"mtime":1657094582317,"results":"22","hashOfConfig":"15"},{"size":3710,"mtime":1657289116725,"results":"23","hashOfConfig":"15"},{"size":550,"mtime":1657099235091,"results":"24","hashOfConfig":"15"},{"size":1194,"mtime":1657289109709,"results":"25","hashOfConfig":"15"},{"size":10139,"mtime":1657523837667,"results":"26","hashOfConfig":"15"},{"size":1573,"mtime":1657524743807,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"qlq6zq",{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"30"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"30"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\basde\\Documents\\Projet\\react-training\\front\\react-pokemon-app\\src\\index.tsx",[],["59","60"],"C:\\Users\\basde\\Documents\\Projet\\react-training\\front\\react-pokemon-app\\src\\App.tsx",["61"],"import React, {FunctionComponent} from 'react';\r\nimport PokemonList from \"./pages/pokemon-list\";\r\nimport PokemonDetail from \"./pages/pokemon-detail\";\r\nimport {BrowserRouter as Router, Switch, Route, Link} from \"react-router-dom\";\r\nimport PageNotFound from \"./pages/page-not-found\";\r\nimport PokemonEdit from \"./pages/pokemon-edit\";\r\n\r\n\r\nconst App: React.FunctionComponent = () => {\r\n\r\n    return (\r\n        <Router>\r\n            <div>\r\n                {/* bar de nav */}\r\n                <nav className=\"nav-wrapper teal\">\r\n                    <Link to=\"/\" className=\"brand-logo center\">\r\n                        Pokédex\r\n                    </Link>\r\n                </nav>\r\n                {/*Systeme de gestion des routes de l'appli*/}\r\n                <Switch>\r\n                    <Route exact path=\"/\" component={PokemonList}/>\r\n                    <Route exact path=\"/pokemons\" component={PokemonList}/>\r\n                    <Route exact path=\"/pokemons/edit/:id\" component={PokemonEdit}/>\r\n                    <Route path=\"/pokemons/:id\" component={PokemonDetail}/>\r\n                    <Route component={PageNotFound}/>\r\n                </Switch>\r\n            </div>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default App;","C:\\Users\\basde\\Documents\\Projet\\react-training\\front\\react-pokemon-app\\src\\models\\mock-pokemon.ts",[],["62","63"],"C:\\Users\\basde\\Documents\\Projet\\react-training\\front\\react-pokemon-app\\src\\pages\\pokemon-list.tsx",[],"C:\\Users\\basde\\Documents\\Projet\\react-training\\front\\react-pokemon-app\\src\\components\\pokemon-card.tsx",[],"C:\\Users\\basde\\Documents\\Projet\\react-training\\front\\react-pokemon-app\\src\\models\\pokemon.ts",[],["64","65"],"C:\\Users\\basde\\Documents\\Projet\\react-training\\front\\react-pokemon-app\\src\\helpers\\format-date.ts",[],"C:\\Users\\basde\\Documents\\Projet\\react-training\\front\\react-pokemon-app\\src\\helpers\\format-type.ts",[],"C:\\Users\\basde\\Documents\\Projet\\react-training\\front\\react-pokemon-app\\src\\pages\\pokemon-detail.tsx",[],"C:\\Users\\basde\\Documents\\Projet\\react-training\\front\\react-pokemon-app\\src\\pages\\page-not-found.tsx",[],"C:\\Users\\basde\\Documents\\Projet\\react-training\\front\\react-pokemon-app\\src\\pages\\pokemon-edit.tsx",[],"C:\\Users\\basde\\Documents\\Projet\\react-training\\front\\react-pokemon-app\\src\\components\\pokemon-form.tsx",["66"],"import React, {FunctionComponent, useEffect, useState} from 'react';\r\nimport Pokemon from '../models/pokemon';\r\nimport formatType from '../helpers/format-type';\r\nimport {useHistory} from \"react-router-dom\";\r\nimport PokemonService from \"../services/pokemon-services\";\r\n\r\n\r\ntype Props = {\r\n    pokemon: Pokemon\r\n};\r\n\r\ntype Field = {\r\n    value?: any,\r\n    error?: string,\r\n    isValid?: boolean\r\n}\r\n\r\ntype Form = {\r\n    name: Field,\r\n    hp: Field,\r\n    cp: Field,\r\n    types: Field\r\n}\r\n\r\nconst PokemonForm: FunctionComponent<Props> = ({pokemon}) => {\r\n\r\n    const [form, setForm] = useState<Form>({\r\n        name: { value: pokemon.name, isValid: true},\r\n        hp: { value: pokemon.hp, isValid: true},\r\n        cp: { value: pokemon.cp, isValid: true},\r\n        types: { value: pokemon.types, isValid: true}\r\n    });\r\n\r\n    const history = useHistory();\r\n\r\n    const types: string[] = [\r\n        'Plante', 'Feu', 'Eau', 'Insecte', 'Normal', 'Electrik',\r\n        'Poison', 'Fée', 'Vol', 'Combat', 'Psy'\r\n    ];\r\n\r\n    const hasType =  (type:string) : boolean => {\r\n        return form.types.value.includes(type);\r\n    };\r\n\r\n\r\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const fieldName: string = e.target.name;\r\n        const fieldValue: string = e.target.value;\r\n        const newField: Field = {[fieldName]: {value: fieldValue}};\r\n\r\n        setForm({...form,...newField});\r\n    };\r\n\r\n\r\n    //Gère la liste à cocher\r\n    const selectType = (type: string, e: React.ChangeEvent<HTMLInputElement>): void  => {\r\n        const checked = e.target.checked;\r\n        let newField: Field;\r\n\r\n        if (checked) {\r\n            //Si l'utilisateur coche une case, le type est ajouté au poke\r\n            const newTypes: string[]= form.types.value.concat([type]);\r\n            newField = {value: newTypes};\r\n        } else {\r\n            //Si l'utilisateur décoche, le type est retiré du poke\r\n            const newTypes: string[]= form.types.value.filter((currentType: string) => currentType !== type);\r\n            newField = {value: newTypes};\r\n        }\r\n        setForm({...form, ...{types: newField}});\r\n    }\r\n\r\n\r\n    //Gère la validation\r\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) =>{\r\n        e.preventDefault();\r\n        const isFormValid = validateForm();\r\n        if (isFormValid) {\r\n            pokemon.name = form.name.value;\r\n            pokemon.hp = form.hp.value;\r\n            pokemon.cp = form.cp.value;\r\n            pokemon.types = form.types.value;\r\n            PokemonService.updatePokemon(pokemon).then(() => history.push(`/pokemons/${pokemon.id}`));\r\n        }\r\n    }\r\n\r\n\r\n    const validateForm = () => {\r\n        let newForm: Form = form;\r\n\r\n        // Validator name\r\n        if(!/^[a-zA-Zàéè ]{3,25}$/.test(form.name.value)) {\r\n            const errorMsg: string = 'Le nom du pokémon est requis (1-25 A-z).';\r\n            const newField: Field = { value: form.name.value, error: errorMsg, isValid: false };\r\n            newForm = { ...newForm, ...{ name: newField } };\r\n        } else {\r\n            const newField: Field = { value: form.name.value, error: '', isValid: true };\r\n            newForm = { ...newForm, ...{ name: newField } };\r\n        }\r\n\r\n        // Validator hp\r\n        if(!/^[0-9]{1,3}$/.test(form.hp.value)) {\r\n            const errorMsg: string = 'Les points de vie du pokémon sont compris entre 0 et 999.';\r\n            const newField: Field = {value: form.hp.value, error: errorMsg, isValid: false};\r\n            newForm = { ...newForm, ...{ hp: newField } };\r\n        } else {\r\n            const newField: Field = { value: form.hp.value, error: '', isValid: true };\r\n            newForm = { ...newForm, ...{ hp: newField } };\r\n        }\r\n\r\n        // Validator cp\r\n        if(!/^[0-9]{1,2}$/.test(form.cp.value)) {\r\n            const errorMsg: string = 'Les dégâts du pokémon sont compris entre 0 et 99';\r\n            const newField: Field = {value: form.cp.value, error: errorMsg, isValid: false};\r\n            newForm = { ...newForm, ...{ cp: newField } };\r\n        } else {\r\n            const newField: Field = { value: form.cp.value, error: '', isValid: true };\r\n            newForm = { ...newForm, ...{ cp: newField } };\r\n        }\r\n\r\n        setForm(newForm);\r\n        return newForm.name.isValid && newForm.hp.isValid && newForm.cp.isValid;\r\n    }\r\n\r\n    const isTypesValid = (type: string): boolean => {\r\n        // Cas n°1: Le pokémon a un seul type, qui correspond au type passé en paramètre.\r\n        // Dans ce cas on revoie false, car l'utilisateur ne doit pas pouvoir décoché ce type (sinon le pokémon aurait 0 type, ce qui est interdit)\r\n        if (form.types.value.length === 1 && hasType(type)) {\r\n            return false;\r\n        }\r\n\r\n        // Cas n°1: Le pokémon a au moins 3 types.\r\n        // Dans ce cas il faut empêcher à l'utilisateur de cocher un nouveau type, mais pas de décocher les types existants.\r\n        if (form.types.value.length >= 2 && !hasType(type)) {\r\n            return false;\r\n        }\r\n\r\n        // Après avoir passé les deux tests ci-dessus, on renvoie 'true',\r\n        // c'est-à-dire que l'on autorise l'utilisateur à cocher ou décocher un nouveau type.\r\n        return true;\r\n    }\r\n\r\n    const deletePokemon = () => {\r\n        PokemonService.deletePokemon(pokemon).then(() => history.push(`/pokemons`))\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={e => handleSubmit(e)}>\r\n            <div className=\"row\">\r\n                <div className=\"col s12 m8 offset-m2\">\r\n                    <div className=\"card hoverable\">\r\n                        <div className=\"card-image\">\r\n                            <img src={pokemon.picture} alt={pokemon.name} style={{width: '250px', margin: '0 auto'}}/>\r\n                            <span className='btn-floating halfway-fab waves-effect waves-light'>\r\n                                <i onClick={deletePokemon} className='material-icons'>delete</i>\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"card-stacked\">\r\n                            <div className=\"card-content\">\r\n                                {/* Pokemon name */}\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"name\">Nom</label>\r\n                                    <input id=\"name\" name=\"name\" type=\"text\" className=\"form-control\"\r\n                                           value={form.name.value}\r\n                                           onChange={e => handleInputChange(e)}></input>\r\n                                    { form.name.error &&\r\n                                        <div className=\"card-panel red accent-1\">\r\n                                            {form.name.error}\r\n                                        </div>\r\n                                    }\r\n\r\n                                </div>\r\n                                {/* Pokemon hp */}\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"hp\">Point de vie</label>\r\n                                    <input id=\"hp\" name=\"hp\" type=\"number\" className=\"form-control\"\r\n                                           value={form.hp.value}\r\n                                           onChange={e => handleInputChange(e)}></input>\r\n                                    { form.hp.error &&\r\n                                        <div className=\"card-panel red accent-1\">\r\n                                            {form.hp.error}\r\n                                        </div>\r\n                                    }\r\n                                </div>\r\n                                {/* Pokemon cp */}\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"cp\">Dégâts</label>\r\n                                    <input id=\"cp\" name=\"cp\" type=\"number\" className=\"form-control\"\r\n                                           value={form.cp.value}\r\n                                           onChange={e => handleInputChange(e)}></input>\r\n                                    { form.cp.error &&\r\n                                        <div className=\"card-panel red accent-1\">\r\n                                            {form.cp.error}\r\n                                        </div>\r\n                                    }\r\n                                </div>\r\n                                {/* Pokemon types */}\r\n                                <div className=\"form-group\">\r\n                                    <label>Types</label>\r\n                                    {types.map(type => (\r\n                                        <div key={type} style={{marginBottom: '10px'}}>\r\n                                            <label>\r\n                                                <input id={type} type=\"checkbox\" className=\"filled-in\"\r\n                                                       value={type}\r\n                                                       disabled={!isTypesValid(type)}\r\n                                                       checked={hasType(type)}\r\n                                                       onChange={e => selectType(type,e)}></input>\r\n                                                <span>\r\n                                                  <p className={formatType(type)}>{type}</p>\r\n                                                </span>\r\n                                            </label>\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"card-action center\">\r\n                                {/* Submit button */}\r\n                                <button type=\"submit\" className=\"btn\">Valider</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default PokemonForm;","C:\\Users\\basde\\Documents\\Projet\\react-training\\front\\react-pokemon-app\\src\\services\\pokemon-services.ts",["67"],{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":1,"column":16,"nodeType":"74","messageId":"75","endLine":1,"endColumn":33},{"ruleId":"68","replacedBy":"76"},{"ruleId":"70","replacedBy":"77"},{"ruleId":"68","replacedBy":"78"},{"ruleId":"70","replacedBy":"79"},{"ruleId":"72","severity":1,"message":"80","line":1,"column":35,"nodeType":"74","messageId":"75","endLine":1,"endColumn":44},{"ruleId":"72","severity":1,"message":"81","line":2,"column":8,"nodeType":"74","messageId":"75","endLine":2,"endColumn":19},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"@typescript-eslint/no-unused-vars","'FunctionComponent' is defined but never used.","Identifier","unusedVar",["82"],["83"],["82"],["83"],"'useEffect' is defined but never used.","'pokemonEdit' is defined but never used.","no-global-assign","no-unsafe-negation"]